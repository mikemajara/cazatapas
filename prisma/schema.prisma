generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  Settings      Settings? @relation(fields: [settingsId], references: [id])
  settingsId    String?
  salt          String?
  apiKey        String?
}

model Settings {
  id                 String     @id @default(cuid())
  isSubscribed       Boolean
  favoriteTags       Tag[]
  favoriteCategories Category[]
  User               User[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// domain specific
model Product {
  id           Int       @id @default(autoincrement())
  name         String?
  raw_name     String?
  description  String?
  price        Float?
  raw_price    String?
  discount     Float?
  raw_discount String?
  shop         Shop?     @relation(fields: [shopId], references: [id])
  shopId       String?
  offer_date   DateTime?
  image        String?
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
  category     Category? @relation(fields: [categoryId], references: [id])
  categoryId   String?
  tags         Tag[]
  brand        String?

}

model Shop {
  id        String    @id @default(cuid())
  name      String
  url       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model Category {
  id         String    @id @default(cuid())
  name       String
  Product    Product[]
  Settings   Settings? @relation(fields: [settingsId], references: [id])
  settingsId String?
}

model Tag {
  id         String    @id @default(cuid())
  name       String
  Product    Product?  @relation(fields: [productId], references: [id])
  productId  Int?
  Settings   Settings? @relation(fields: [settingsId], references: [id])
  settingsId String?
}
