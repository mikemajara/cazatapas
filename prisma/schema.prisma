generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  Settings      Settings? @relation(fields: [settingsId], references: [id])
  settingsId    String?
  salt          String?
  apiKey        String?
  Rating        Rating[]
  Comment       Comment[]
}

model Settings {
  id   String @id @default(cuid())
  User User[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// domain specific
model Dish {
  id           Int         @id @default(autoincrement())
  name         String?
  description  String?
  price        Float?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId Int?
  images       Image[]
  createdAt    DateTime?   @default(now())
  updatedAt    DateTime?   @updatedAt
  tags         Tag[]
  ratings      Rating[]
  comments     Comment[]
}

model Restaurant {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  url       String?
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dishes    Dish[]
  images    Image[]
}

model Tag {
  id     String  @id @default(cuid())
  name   String
  color  String?
  dishes Dish[]
}

model Image {
  id           String      @id @default(cuid())
  fileName     String?     @unique
  dish         Dish?       @relation(fields: [dishId], references: [id])
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  dishId       Int?
  restaurantId Int?
}

model Rating {
  value  Float  @default(0)
  user   User   @relation(fields: [userId], references: [id])
  userId String
  Dish   Dish   @relation(fields: [dishId], references: [id])
  dishId Int

  @@unique([userId, dishId])
}

model Comment {
  user      User     @relation(fields: [userId], references: [id])
  text      String?
  userId    String
  Dish      Dish     @relation(fields: [dishId], references: [id])
  dishId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, dishId])
}
